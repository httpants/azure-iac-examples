# Pipeline to deploy Network, AKS, App Gateway & APIM

name: deployAzureResources

trigger:
- master

variables:
  # serviceConnection: # set in GUI variables
  location: australiaeast
  projectName: appgwy-apim
  resourceGroupName: "$(projectName)-rg"
  dnsResourceGroupName: "external-dns-zones-rg"
  timeStamp: $[format('{2:yyyy}-{2:MM}-{2:dd}-{2:HHmmss}', 'network', 'deployment', pipeline.startTime)]
  tags: '{"costCentre":"478132","project":"$(projectName)"}'
  containerName: 'templates' 
  domainName: kainiindustries.net
  keyVaultUserObjectId: 1eb6f33c-ed0a-4d01-8025-593b5d117f12

stages:
- stage: 'release'
  displayName: 'environment release'
  jobs:
    - job: 'dev_release_job'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              $now = Get-Date
              $sasTokenExpiry = $now.AddHours(2).ToString('u') -replace ' ','T'
              Write-Host "##vso[task.setvariable variable=sasTokenExpiry;]$sasTokenExpiry"

        - task: AzureResourceGroupDeployment@2
          name: 'deployStorage'
          displayName: 'Deploy storage account for arm templates'
          enabled: true
          inputs:
            action: Create Or Update Resource Group
            azureSubscription: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            csmFile: ./nestedtemplates/storage.json
            location: $(location)
            templateLocation: Linked artifact
            deploymentMode: Incremental
            deploymentName: "storageDeployment-$(timeStamp)"
            outputVariable: storageTemplateOutput
            overrideParameters: -containerName $(containerName) -sasTokenExpiry $(sasTokenExpiry)

        - task: ARM Outputs@5
          name: 'GetStorageDeploymentOutput1'
          displayName: 'Get ARM Storage Deployment Output'
          inputs:
            ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
            ConnectedServiceNameARM: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            whenLastDeploymentIsFailed: 'fail'
            deploymentNameFilter: "storageDeployment-$(timeStamp)"

        - task: AzureResourceGroupDeployment@2
          name: 'deployKeyVault'
          displayName: 'Deploy keyvault'
          enabled: true
          inputs:
            action: Create Or Update Resource Group
            azureSubscription: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            csmFile: ./nestedtemplates/keyvault.json
            location: $(location)
            templateLocation: Linked artifact
            deploymentMode: Incremental
            deploymentName: "keyVaultDeployment-$(timeStamp)"
            overrideParameters: -keyVaultUserObjectId $(keyVaultUserObjectId)

        - task: ARM Outputs@5
          name: 'GetKeyVaultDeploymentOutput'
          displayName: 'Get KeyVault Deployment Output'
          inputs:
            ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
            ConnectedServiceNameARM: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            whenLastDeploymentIsFailed: 'fail'
            deploymentNameFilter: "keyVaultDeployment-$(timeStamp)"

        - task: AzurePowerShell@4
          displayName: 'Upload certificates to key vault'
          enabled: true
          inputs:
            azureSubscription: $(serviceConnection)
            ScriptType: FilePath
            ScriptPath: './scripts/upload-KeyVaultSecrets.ps1'
            ScriptArguments: -CertPassword $(certPassword) -KeyVaultName $(keyVaultName)
            azurePowerShellVersion: LatestVersion

        - task: ARM Outputs@5
          name: 'GetKeyvaultDeploymentOutput1'
          displayName: 'Get ARM Storage Deployment Output'
          inputs:
            ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
            ConnectedServiceNameARM: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            whenLastDeploymentIsFailed: 'fail'
            deploymentNameFilter: "keyvaultDeployment-$(timeStamp)"
       
        - task: AzureCLI@1
          displayName: 'Copy ARM template files to Azure blob storage'
          enabled: true
          inputs:
            azureSubscription: $(serviceConnection)
            scriptLocation: 'inlineScript'
            inlineScript: 'az storage blob upload-batch -d $(containerName) -s ./nestedtemplates/ --pattern *.json --account-name $(storageAccountName)'

        - task: AzurePowerShell@4
          name: 'copyFilesToBlobStorage'
          enabled: false
          displayName: 'Copy ARM templates to blob storage'
          inputs:
            Inline: 
            ScriptPath: ./scripts/azureFileCopy.ps1
            ScriptType: FilePath
            azureSubscription: $(serviceConnection)
            azurePowerShellVersion: LatestVersion
            ScriptArguments: -resourceGroupName $(resourceGroupName) -storageAccountName $(storageAccountName) -containerName $(containerName) -folderpath ./templates/nested -filter *.json        

        - task: AzureResourceGroupDeployment@2
          name: 'deployResources'
          displayName: 'Deploy resources'
          enabled: true
          inputs:
            action: Create Or Update Resource Group
            azureSubscription: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            csmFile: ./templates/azuredeploy.json
            csmParametersFile: ./azuredeploy.parameters.json
            location: $(location)
            templateLocation: Linked artifact
            deploymentMode: Incremental
            deploymentName: "resourceDeployment-$(timeStamp)"
            outputVariable: resourceTemplateOutput
            overrideParameters: -certificatePassword $(certPassword) -storageUri $(storageContainerUri) -keyVaultName $(keyVaultName) -keyVaultUri $(keyVaultUri) -keyVaultId $(keyVaultId) -sasToken $(storageAccountSasToken) -apiHostName api -portalHostName portal -domainName $(domainName)

        - task: ARM Outputs@5
          name: 'GetResourceDeploymentOutput1'
          displayName: 'Get ARM Resource Deployment Output'
          enabled: true
          inputs:
            ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
            ConnectedServiceNameARM: $(serviceConnection)
            resourceGroupName: $(resourceGroupName)
            whenLastDeploymentIsFailed: 'fail'
            deploymentNameFilter: "resourceDeployment-$(timeStamp)"

        - task: AzurePowerShell@4
          name: 'createDnsRecord'
          enabled: true
          displayName: 'Create new DNS Record for App Gateway'
          inputs:
            Inline: 
            ScriptPath: ./scripts/New-DnsRecord.ps1
            ScriptType: FilePath
            azureSubscription: $(serviceConnection)
            azurePowerShellVersion: LatestVersion
            ScriptArguments: -ResourceGroupName $(dnsResourceGroupName) -ZoneName $(domainName) -TargetName $(appGatewayPublicDnsName)       
